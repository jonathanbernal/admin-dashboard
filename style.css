@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,700;1,100;1,300;1,400;1,700&display=swap');

:root {
    --blue-tone-color: #1992D4;
    --yellow-tone-color: #FACC15;
    --yellow-tone-color-darker: #F0B429;
    --gray-tone-color: #E2E8F0;
    --white-tone-color: #FFFFFF;
}

* {
    font-size: 12px;
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    
    background-color: var(--gray-tone-color);
}

.navbar {
    grid-column: 1 / 3;
    grid-row: 1 / 4;
    display: grid;
    grid-template-rows: repeat(auto-fill, minmax(40px, 1fr));
    gap: 2rem;

    background-color: var(--blue-tone-color);
    color: var(--white-tone-color);
    padding: 1rem;

    /* By reducing the width of the container, we reduce the amount of unused
       space by the navigation bar. It makes the element look nicer
    */
    width: 80%;
}

.navbar-brand {
    display: grid;
    /* we use auto-fill as opposed to auto-fit to eliminate unnecessary
       padding created by the grid between the icon and the text. We then
       add a gap to separate the icon from the brand title.
    */
    grid-template-columns: repeat(auto-fill, minmax(2rem, 1fr));
    gap: 1rem;
    align-items: center;
    justify-items: flex-start;
}

.icon {
    width: 2rem;
    height: 2rem;
}

.brand-icon {
    width: 3rem;
    height: 3rem;
}

.navbar-brand-title {
    font-size: 1.5rem;
}

.nav-links {
    display: grid;
    gap: 1rem;
}

.nav-links * {
    color: var(--white-tone-color);
    text-decoration: none;
    list-style: none;
    font-weight: 700;
}

/*
    Structuring the links with a flex container is way easier than
    using a grid container.
*/
.nav-link-item a{
    display: flex;
    justify-content: flex-start;
    align-items: center;
    gap: 2rem;

    font-size: 1.1rem;
    /* Using this property makes the links only clickable in the icon and name areas
       and not on the entire row where they are located.
    */
    width: fit-content;
}

.header {
    grid-column: 3 / 12;
    grid-row: 1 / 2;
    object-fit: cover;
}

.main {
    grid-column: 3 / 10;
    grid-row: 2 / 4;
    height: 100vmin;
}

.announcements {
    grid-column: 10 / 12;
    grid-row: 2 / 3;
}

.trending {
    grid-column: 10/ 12;
    grid-row: 3 / 4;
}